#version 330

uniform vec2 u_input_state;
uniform vec2 u_resolution;
uniform float u_time;
uniform float u_distance_dropoff;
uniform vec3 u_color;

float ripple(float dist, float shift)
{
	return cos(64.0 * dist + shift) / (1.0 + 1.0 * dist);
}

#define POLES 50
#define REFLECTIONS 10.0

vec4 main_impl( in vec2 fragCoord )
{
	vec2 dist_to_center = vec2(distance(fragCoord.x, u_resolution.x / 2), distance(fragCoord.y, u_resolution.y / 2));

	float larger = max(u_resolution.x, u_resolution.y);
	vec2 uv = (fragCoord.xy - .5*u_resolution.xy) / larger * 1.4;
	vec2 uvflip = vec2(uv.x, -uv.y);
	vec2 cursor = (u_input_state.xy - .5*u_resolution.xy) / larger;
	vec2 blessr = vec2(-cursor.x, cursor.y);
	
	float lum = .5 + .1 * ripple(length(uv), 0.0) + 0.0;
	
	const float twopi = 2.0 * 3.141592654;
	const int count = POLES;
	
	vec2 rot = vec2(cos(twopi*.618), sin(twopi*.618));
	vec2 tor = vec2(-sin(twopi*.618), cos(twopi*.618));
	for (int i = 0; i < count; ++i)
	{
		lum += .2 * ripple(length(cursor - uv), -u_time);
		cursor = cursor.x*rot + cursor.y*tor;
	}
	
	lum = 3.0*lum*lum - 2.0*lum*lum*lum - length(dist_to_center) * u_distance_dropoff;
	lum = lum*lum;
	lum = max(0, lum);
	
	if (lum > 0.3)
	{
		lum = 0;
	}
	
	return vec4(lum, lum, lum, 1.0);
}

void main()
{
	vec4 out_col = main_impl(gl_FragCoord.xy);
	out_col = vec4(u_color.x * out_col.x,u_color.y * out_col.x,u_color.z * out_col.x,1.0);
	gl_FragColor = out_col;
}