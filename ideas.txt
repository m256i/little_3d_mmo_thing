#include <iostream>
#include <vector>
#include <numeric>
#include <algorithm>
#include <utility>
#include <stack>

struct rect_bounds
{
    int xmin, xmax, ymin, ymax, size;
    
    int calc_size()
    {
        if (size != 0)
        {
            return size;
        }
        return (xmax - xmin) * (ymax - ymin); 
    }
};

struct cubooid_bounds
{
    int xmin, xmax, ymin, ymax, zmin, zmax, size;
    int calc_size()
    {
        if (size != 0)
        {
            return size;
        }
        return (xmax - xmin) * (ymax - ymin) * (zmax - zmin); 
    }
};

std::vector<std::vector<char>> bit_and_vec(std::vector<std::vector<char>>& a, std::vector<std::vector<char>>& b)
{
  std::vector<std::vector<char>> out(a.size(), std::vector<char>(b.size(), 0));
  
  for (int i = 0; i != a.size(); ++i)
  {
    for (int j = 0; j != a[0].size(); ++j)
    {
        out[i][j] = a[i][j] & b[i][j];
    }
  }
  return out;
}

rect_bounds maximalRectangle(std::vector<std::vector<char>>& M) 
{
    if(!M.size()) return {-1,-1,-1,-1,-1};
    int ans = 0, m =M.size(), n = M[0].size();

    std::vector<std::vector<short>> dp(m+1, std::vector<short>(n+1)), up(m, std::vector<short>(n,1)), down(up);
    
    for(int i = m-1; ~i; i--)
    {
        for(int j = n-1; ~j; j--) 
        {
            dp[i][j] = M[i][j] == 1 ? dp[i][j+1] + 1 : 0;
        }
    }
    
    std::stack<int> s;

    for(int j = 0; j < n; j++) 
    {
        s = std::stack<int>();
        for(int i = 0; i < m; i++)
        {
            while(s.size() && dp[s.top()][j] >= dp[i][j]) s.pop();
            up[i][j] = i - (s.size() ? s.top() : -1);
            s.push(i);
        }
        s = std::stack<int>();
        for(int i = m-1; ~i; i--)
        {
            while(s.size() && dp[s.top()][j] >= dp[i][j]) s.pop();
            down[i][j] = (s.size() ? s.top() : m) - i;
            s.push(i);
        }
    }
    
    std::vector<rect_bounds> rects{};

    for(int y = 0; y < m; y++)
    {
        for(int x = 0; x < n; x++) 
        {
            ans = std::max(ans, dp[y][x] * (up[y][x]+down[y][x]-1));
            rects.push_back({x, x + dp[y][x] - 1, up[y][x] - 1, down[y][x]-1, dp[y][x] * (up[y][x]+down[y][x]-1)});
        }
    }
    
    auto biggest = std::max_element(rects.begin(), rects.end(),
        [](const rect_bounds& a, const rect_bounds& b)
        {
            return a.size < b.size;
        }
    );

    return *biggest;
}

cubooid_bounds maximalCuboid(std::vector<std::vector<std::vector<char>>>& M) 
{
    std::vector<cubooid_bounds> biggest_found{};

    for (int i = 0; i < M.size(); i++)
    {
        auto& current_plane = M.at(i);
        auto br = maximalRectangle(current_plane);

        biggest_found.push_back({br.xmin,  br.xmax, br.ymin,  br.ymax, i, i + 1, br.calc_size() * (i + 1) });

        std::vector<std::vector<char>> bit_and_plane{M.at(0)};

        for (int j = 0; j < i; j++)
        {
            bit_and_plane = bit_and_vec(bit_and_plane, M.at(j));
            auto tmp = maximalRectangle(bit_and_plane);
            biggest_found.push_back({tmp.xmin, tmp.xmax,tmp.ymin, tmp.ymax, 0, j, tmp.calc_size() * (j + 1)});
        }
    }

    auto biggest = std::max_element(
        biggest_found.begin(), biggest_found.end(),
        [](const cubooid_bounds& a, const cubooid_bounds& b)
        {
            return a.size < b.size;
        }
    );

    return *biggest;
}

int main()
{
    std::vector<std::vector<char>> bla = 
    {
        {1,1,1},
        {1,1,1},
        {1,1,0}
    };

    std::vector<std::vector<std::vector<char>>> bla2 = 
    {   {
            {1,1,1},
            {1,1,1},
            {1,1,1}
        },
        {
            {1,1,1},
            {1,1,1},
            {1,1,0}
        }
    };

    std::cout << maximalCuboid(bla2).size;

}




#include <array>
#include <vector>
#include <future>
#include <memory>
#include <mutex>
#include <new>
#include <immintrin.h> // prefetching
#include <type_traits>
#include <coroutine>
#include <atomic>
#include <iostream>
#include <variant>

struct shader_builder
{
    std::string content{};

    struct sb_ast_node
    {
        std::string operation{};
        sb_ast_node *lhs{}, *rhs{};
        std::string branch_owner{};

        void flip()
        {
            auto temp = rhs;
            rhs = lhs;
            lhs = temp;
        }

        void print()
        {
            //std::cout << lhs->operation << operation << rhs->operation << " owner: " << branch_owner << "\n";
        }

    };

    struct sb_ast_node_simple
    {
        std::string lhs{}, operation{}, rhs{};

        void print()
        {
          //  std::cout << lhs << operation << rhs << "\n";
        }

        void flip()
        {
            auto temp = rhs;
            rhs = lhs;
            lhs = temp;
        }
    };
    
    sb_ast_node root, last_added;


    std::vector<sb_ast_node> temp_nodes;
    std::vector<sb_ast_node_simple> outside_buffer{};

    void add_to_ast()
    {
        last_added = {outside_buffer[0].operation, new sb_ast_node{outside_buffer[0].lhs}, new sb_ast_node{outside_buffer[0].rhs, }, outside_buffer[0].lhs};
        
      //  std::cout << "first node: ";
        last_added.print(); 

        for (int i = 1; i != outside_buffer.size(); i++)
        {
            // if new lhs is equal to last lhs we want to set new lhs to last and update last to be new
            if (outside_buffer[i].lhs == last_added.branch_owner)
            {
             //   std::cout << "current: ";
                outside_buffer[i].print();
             //   std::cout << "added old lhs to  new lhs!\n";

                auto old_last = last_added;
                last_added = {outside_buffer[i].operation, new sb_ast_node{old_last}, new sb_ast_node{outside_buffer[i].rhs}, last_added.branch_owner};

             //   std::cout << "last added now: ";
                last_added.print();

              //  std::cout << "last added lhs now: ";
                last_added.lhs->print();

                continue;
            }
            // if new rhs is equal to last lhs we want to new rhs to last lhs and update last
            if (outside_buffer[i].rhs ==last_added.branch_owner)
            {   
              //  std::cout << "current: ";
                outside_buffer[i].print();
             //   std::cout << "added old lhs to  new rhs!\n";

                auto old_last = last_added;
                last_added = {outside_buffer[i].operation, new sb_ast_node{outside_buffer[i].lhs}, new sb_ast_node{old_last}, last_added.branch_owner};

              //  std::cout << "last added now: ";
                last_added.print();

              //  std::cout << "last added lhs now: ";
               // last_added.lhs->print();
                continue;
            }
            else 
            {
                std::cout << "ERROR!\n";
            }
        }

        root = last_added;

    }

    void build_recursive(sb_ast_node* _node)
    {
        if (_node->lhs == nullptr && _node->rhs == nullptr)
        {
            content += _node->operation;
        }

        if (_node->lhs != nullptr)
        {
            content += "(";
            build_recursive(_node->lhs);
            content += ")";
        }
        
        if (_node->lhs != nullptr && _node->rhs != nullptr)
        {
            content += _node->operation;
        }
        
        if (_node->rhs != nullptr)
        {
            content += "(";
            build_recursive(_node->rhs);
            content += ")";
        }
    }

    void build()
    {
        build_recursive(&root);
    }

    void print_content()
    {
        add_to_ast();
        build();
        std::cout << content << "\n";
    }

    
};

shader_builder sb{};

struct test_num
{
    test_num(std::string _name)
    {
        name = _name;
        local_node.lhs = new shader_builder::sb_ast_node{name, 0, 0, name};
    }

    std::string name{};
    shader_builder::sb_ast_node local_node{};

    decltype(auto) operator+(const test_num& other)
    {
        sb.outside_buffer.push_back({name, "+", other.name});
        return (*this);
    }
    decltype(auto) operator-(const test_num& other)
    {
        sb.outside_buffer.push_back({name, "-", other.name});
        return (*this);
    }
    decltype(auto) operator*(const test_num& other)
    {
        sb.outside_buffer.push_back({name, "*", other.name});
        return (*this);
    }

    friend decltype(auto) operator*(int lhs, const test_num& other)
    {
        sb.outside_buffer.push_back({std::to_string(lhs), "*", other.name});
        return lhs;
    }

    decltype(auto) operator/(const test_num& other)
    {
        sb.outside_buffer.push_back({name, "/", other.name});
        return (*this);
    }
    decltype(auto) operator/(const int& other)
    {
        sb.outside_buffer.push_back({name, "/", std::to_string(other)});
        return (*this);
    }
    decltype(auto) operator=(const test_num& other)
    {
        sb.outside_buffer.push_back({name, "=", other.name});
        return (*this);
    }

    decltype(auto) operator=(const int& other)
    {
        sb.outside_buffer.push_back({name, "=", std::to_string(other)});
        return (*this);
    }

};


// the built-ins as struct member of shader template 
// others can get unique generated names internally
// move to compile

test_num gl_Position{"gl_Position"},b{"b"},c{"c"};


int main()
{
    gl_Position = 3 * c;
    sb.print_content();
}