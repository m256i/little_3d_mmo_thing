#include <iostream>
#include <vector>
#include <numeric>
#include <algorithm>
#include <utility>
#include <stack>

struct rect_bounds
{
    int xmin, xmax, ymin, ymax, size;
    
    int calc_size()
    {
        if (size != 0)
        {
            return size;
        }
        return (xmax - xmin) * (ymax - ymin); 
    }
};

struct cubooid_bounds
{
    int xmin, xmax, ymin, ymax, zmin, zmax, size;
    int calc_size()
    {
        if (size != 0)
        {
            return size;
        }
        return (xmax - xmin) * (ymax - ymin) * (zmax - zmin); 
    }
};

std::vector<std::vector<char>> bit_and_vec(std::vector<std::vector<char>>& a, std::vector<std::vector<char>>& b)
{
  std::vector<std::vector<char>> out(a.size(), std::vector<char>(b.size(), 0));
  
  for (int i = 0; i != a.size(); ++i)
  {
    for (int j = 0; j != a[0].size(); ++j)
    {
        out[i][j] = a[i][j] & b[i][j];
    }
  }
  return out;
}

rect_bounds maximalRectangle(std::vector<std::vector<char>>& M) 
{
    if(!M.size()) return {-1,-1,-1,-1,-1};
    int ans = 0, m =M.size(), n = M[0].size();

    std::vector<std::vector<short>> dp(m+1, std::vector<short>(n+1)), up(m, std::vector<short>(n,1)), down(up);
    
    for(int i = m-1; ~i; i--)
    {
        for(int j = n-1; ~j; j--) 
        {
            dp[i][j] = M[i][j] == 1 ? dp[i][j+1] + 1 : 0;
        }
    }
    
    std::stack<int> s;

    for(int j = 0; j < n; j++) 
    {
        s = std::stack<int>();
        for(int i = 0; i < m; i++)
        {
            while(s.size() && dp[s.top()][j] >= dp[i][j]) s.pop();
            up[i][j] = i - (s.size() ? s.top() : -1);
            s.push(i);
        }
        s = std::stack<int>();
        for(int i = m-1; ~i; i--)
        {
            while(s.size() && dp[s.top()][j] >= dp[i][j]) s.pop();
            down[i][j] = (s.size() ? s.top() : m) - i;
            s.push(i);
        }
    }
    
    std::vector<rect_bounds> rects{};

    for(int y = 0; y < m; y++)
    {
        for(int x = 0; x < n; x++) 
        {
            ans = std::max(ans, dp[y][x] * (up[y][x]+down[y][x]-1));
            rects.push_back({x, x + dp[y][x] - 1, up[y][x] - 1, down[y][x]-1, dp[y][x] * (up[y][x]+down[y][x]-1)});
        }
    }
    
    auto biggest = std::max_element(rects.begin(), rects.end(),
        [](const rect_bounds& a, const rect_bounds& b)
        {
            return a.size < b.size;
        }
    );

    return *biggest;
}

cubooid_bounds maximalCuboid(std::vector<std::vector<std::vector<char>>>& M) 
{
    std::vector<cubooid_bounds> biggest_found{};

    for (int i = 0; i < M.size(); i++)
    {
        auto& current_plane = M.at(i);
        auto br = maximalRectangle(current_plane);

        biggest_found.push_back({br.xmin,  br.xmax, br.ymin,  br.ymax, i, i + 1, br.calc_size() * (i + 1) });

        std::vector<std::vector<char>> bit_and_plane{M.at(0)};

        for (int j = 0; j < i; j++)
        {
            bit_and_plane = bit_and_vec(bit_and_plane, M.at(j));
            auto tmp = maximalRectangle(bit_and_plane);
            biggest_found.push_back({tmp.xmin, tmp.xmax,tmp.ymin, tmp.ymax, 0, j, tmp.calc_size() * (j + 1)});
        }
    }

    auto biggest = std::max_element(
        biggest_found.begin(), biggest_found.end(),
        [](const cubooid_bounds& a, const cubooid_bounds& b)
        {
            return a.size < b.size;
        }
    );

    return *biggest;
}

int main()
{
    std::vector<std::vector<char>> bla = 
    {
        {1,1,1},
        {1,1,1},
        {1,1,0}
    };

    std::vector<std::vector<std::vector<char>>> bla2 = 
    {   {
            {1,1,1},
            {1,1,1},
            {1,1,1}
        },
        {
            {1,1,1},
            {1,1,1},
            {1,1,0}
        }
    };

    std::cout << maximalCuboid(bla2).size;

}





#include <array>
#include <vector>
#include <future>
#include <memory>
#include <mutex>
#include <new>
#include <immintrin.h> // prefetching
#include <type_traits>
#include <coroutine>
#include <atomic>
#include <iostream>

struct shader_builder
{
    std::string content{};

    struct sb_ast_node
    {
        std::string operation{};
        sb_ast_node* prev{}, *next{};
    };

    void build_recursive(sb_ast_node* _node)
    {
        if (_node->prev == nullptr && _node->next == nullptr)
        {
            content += _node->operation;
        }

        if (_node->prev != nullptr)
        {
            content += "(";
            build_recursive(_node->prev);
            content += ")";
        }
        
        if (_node->prev != nullptr && _node->next != nullptr)
        {
            content += _node->operation;
        }
        
        if (_node->next != nullptr)
        {
            content += "(";
            build_recursive(_node->next);
            content += ")";
        }
    }

    void build()
    {
        build_recursive(&root);
    }

    void print_content()
    {
        std::cout << content << "\n";
    }

    sb_ast_node root;
};

int main()
{
    shader_builder s;

    shader_builder::sb_ast_node lhslhs{"2.5", 0,0};
    shader_builder::sb_ast_node lhsrhs{"800", 0,0};

    shader_builder::sb_ast_node lhs{"+", &lhslhs, &lhsrhs}, rhs{"89", 0,0};

    s.root.operation = "+";
    s.root.prev = &lhs;
    s.root.next = &rhs;

    s.build();
    s.print_content();

}